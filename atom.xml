<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DevOps-Life</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="ubclebob2013.github.io/"/>
  <updated>2018-12-28T09:57:54.090Z</updated>
  <id>ubclebob2013.github.io/</id>
  
  <author>
    <name>Truman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kubernetes架构</title>
    <link href="ubclebob2013.github.io/2018/12/28/kubernetes%E6%9E%B6%E6%9E%84/"/>
    <id>ubclebob2013.github.io/2018/12/28/kubernetes架构/</id>
    <published>2018-12-28T09:44:27.000Z</published>
    <updated>2018-12-28T09:57:54.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="k8s架构"><a href="#k8s架构" class="headerlink" title="k8s架构"></a>k8s架构</h1><p>节选自 <strong><a href="https://draveness.me/understanding-kubernetes" target="_blank" rel="noopener">https://draveness.me/understanding-kubernetes</a></strong> 请大家到原网站观看更多内容</p><p>Kubernetes 遵循非常传统的客户端服务端架构，客户端通过 RESTful 接口或者直接使用 kubectl 与 Kubernetes 集群进行通信，这两者在实际上并没有太多的区别，后者也只是对 Kubernetes 提供的 RESTful API 进行封装并提供出来。</p><p><img src="https://img.draveness.me/2018-11-25-kubernetes-architecture.png" alt="KUBERNETES ARCHITECTURE"></p><p>每一个 Kubernetes 就集群都由一组 Master 节点和一系列的 Worker 节点组成，其中 Master 节点主要负责存储集群的状态并为 Kubernetes 对象分配和调度资源。</p><a id="more"></a><h1 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h1><p>作为管理集群状态的 Master 节点，它主要负责接收客户端的请求，安排容器的执行并且运行控制循环，将集群的状态向目标状态进行迁移，Master 节点内部由三个组件构成：</p><p><img src="https://img.draveness.me/2018-11-25-kubernetes-master-node.png" alt="KUBERNETES MASTER NODE"></p><p>其中 API Server 负责处理来自用户的请求，其主要作用就是对外提供 RESTful 的接口，包括用于查看集群状态的读请求以及改变集群状态的写请求，也是唯一一个与 etcd 集群通信的组件。</p><p>而 Controller 管理器运行了一系列的控制器进程，这些进程会按照用户的期望状态在后台不断地调节整个集群中的对象，当服务的状态发生了改变，控制器就会发现这个改变并且开始向目标状态迁移。</p><p>最后的 Scheduler 调度器其实为 Kubernetes 中运行的 Pod 选择部署的 Worker 节点，它会根据用户的需要选择最能满足请求的节点来运行 Pod，它会在每次需要调度 Pod 时执行。</p><h1 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h1><p>其他的 Worker 节点实现就相对比较简单了，它主要由 kubelet 和 kube-proxy 两部分组成：</p><p><img src="https://img.draveness.me/2018-11-25-kubernetes-worker-node.png" alt="KUBERNETES WORKER NODE"></p><p>kubelet 是一个节点上的主要服务，它周期性地从 API Server 接受新的或者修改的 Pod 规范并且保证节点上的 Pod 和其中容器的正常运行，还会保证节点会向目标状态迁移，该节点仍然会向 Master 节点发送宿主机的健康状况。</p><p>另一个运行在各个节点上的代理服务 kube-proxy 负责宿主机的子网管理，同时也能将服务暴露给外部，其原理就是在多个隔离的网络中把请求转发给正确的 Pod 或者容器。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;k8s架构&quot;&gt;&lt;a href=&quot;#k8s架构&quot; class=&quot;headerlink&quot; title=&quot;k8s架构&quot;&gt;&lt;/a&gt;k8s架构&lt;/h1&gt;&lt;p&gt;节选自 &lt;strong&gt;&lt;a href=&quot;https://draveness.me/understanding-kubernetes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://draveness.me/understanding-kubernetes&lt;/a&gt;&lt;/strong&gt; 请大家到原网站观看更多内容&lt;/p&gt;
&lt;p&gt;Kubernetes 遵循非常传统的客户端服务端架构，客户端通过 RESTful 接口或者直接使用 kubectl 与 Kubernetes 集群进行通信，这两者在实际上并没有太多的区别，后者也只是对 Kubernetes 提供的 RESTful API 进行封装并提供出来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.draveness.me/2018-11-25-kubernetes-architecture.png&quot; alt=&quot;KUBERNETES ARCHITECTURE&quot;&gt;&lt;/p&gt;
&lt;p&gt;每一个 Kubernetes 就集群都由一组 Master 节点和一系列的 Worker 节点组成，其中 Master 节点主要负责存储集群的状态并为 Kubernetes 对象分配和调度资源。&lt;/p&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="ubclebob2013.github.io/categories/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="ubclebob2013.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes总结</title>
    <link href="ubclebob2013.github.io/2018/12/28/kubernetes%E6%80%BB%E7%BB%93/"/>
    <id>ubclebob2013.github.io/2018/12/28/kubernetes总结/</id>
    <published>2018-12-28T02:25:17.000Z</published>
    <updated>2018-12-28T04:01:50.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kubernetes-总结"><a href="#kubernetes-总结" class="headerlink" title="kubernetes 总结"></a>kubernetes 总结</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="0x01-kubernetes包含几个组件。各个组件的功能是什么。组件之间是如何交互的"><a href="#0x01-kubernetes包含几个组件。各个组件的功能是什么。组件之间是如何交互的" class="headerlink" title="0x01 kubernetes包含几个组件。各个组件的功能是什么。组件之间是如何交互的"></a>0x01 kubernetes包含几个组件。各个组件的功能是什么。组件之间是如何交互的</h3><h3 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h3><h4 id="kube-apiserver"><a href="#kube-apiserver" class="headerlink" title="kube-apiserver"></a>kube-apiserver</h4><p>暴露整个集群的API，任何资源请求/调用操作都是通过调用API来实现，唯一一个跟ETCD通信的组件</p><h4 id="ETCD"><a href="#ETCD" class="headerlink" title="ETCD"></a>ETCD</h4><p>存储整个集群的信息</p><h4 id="kube-scheduler"><a href="#kube-scheduler" class="headerlink" title="kube-scheduler"></a>kube-scheduler</h4><p>负责对于新建pod的调度，基于node节点的软件硬件负载和亲和性来选择节点</p><h4 id="kube-controller-manager"><a href="#kube-controller-manager" class="headerlink" title="kube-controller-manager"></a>kube-controller-manager</h4><p>运行在master节点的控制器的集合</p><ul><li>Node Controller 监控和相应节点down</li><li>Replication Controller 为每个RC对象维护正确数量的pod</li><li>Endpoints Controller 负责建立Endpoints，链接Service和Pods</li><li>Service Account &amp; Token Controllers 为新的Namespace创建默认账户和API访问Token</li></ul><h4 id="cloud-controller-manager"><a href="#cloud-controller-manager" class="headerlink" title="cloud-controller-manager"></a>cloud-controller-manager</h4><p>负责和底层云服务交互(可选)</p><ul><li>Node Controller</li><li>Route Controller</li><li>Service Controller</li><li>Volume Controller</li></ul><a id="more"></a><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><h4 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a>kubelet</h4><p>运行与每个节点，根据下发的PodSpecs确保Pod中的容器的运行和健康</p><h4 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube-proxy"></a>kube-proxy</h4><p>维护主机上kube服务涉及的网络规则和连接转发，负责service的实现,采用iptables(Nat/Filter)</p><ul><li>侦听service更新事件，并更新service相关的iptables规则</li><li>侦听endpoint更新事件，更新endpoint相关的iptables规则（如 KUBE-SVC-链中的规则），然后将包请求转入endpoint对应的Pod</li></ul><h4 id="Container-Runtime"><a href="#Container-Runtime" class="headerlink" title="Container Runtime"></a>Container Runtime</h4><p>容器运行时，支持Docker rkt runc </p><h3 id="Addon"><a href="#Addon" class="headerlink" title="Addon"></a>Addon</h3><h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><p>集群的DNS，负责内部服务的DNS解析</p><h4 id="dashboard"><a href="#dashboard" class="headerlink" title="dashboard"></a>dashboard</h4><h4 id="Container-Resource-Monitoring"><a href="#Container-Resource-Monitoring" class="headerlink" title="Container Resource Monitoring"></a>Container Resource Monitoring</h4><p>容器资源监控</p><h4 id="Cluster-level-Logging"><a href="#Cluster-level-Logging" class="headerlink" title="Cluster-level Logging"></a>Cluster-level Logging</h4><hr><h3 id="0x02-k8s的pause容器有什么用。是否可以去掉。"><a href="#0x02-k8s的pause容器有什么用。是否可以去掉。" class="headerlink" title="0x02 k8s的pause容器有什么用。是否可以去掉。"></a>0x02 k8s的pause容器有什么用。是否可以去掉。</h3><p>pause容器是pod级别的，每个pod中的pause容器为业务容器的父容器</p><ul><li>共享命名空间 IPC Hostname Network PID</li><li>而是提供Pid Namespace并使用init进程。</li></ul><hr><h3 id="0x03-k8s中的pod内几个容器之间的关系是什么"><a href="#0x03-k8s中的pod内几个容器之间的关系是什么" class="headerlink" title="0x03 k8s中的pod内几个容器之间的关系是什么"></a>0x03 k8s中的pod内几个容器之间的关系是什么</h3><p>都由Pod中的pause容器创建，共享network和volume资源</p><hr><h3 id="0x04-一个经典pod的完整生命周期。"><a href="#0x04-一个经典pod的完整生命周期。" class="headerlink" title="0x04 一个经典pod的完整生命周期。"></a>0x04 一个经典pod的完整生命周期。</h3><ul><li>Pending：Pod 定义正确，提交到 Master，但其包含的容器镜像还未完全创建。通常处在 Master 对 Pod 的调度过程中。</li><li>ContainerCreating：Pod 的调度完成，被分配到指定 Node 上。处于容器创建的过程中。通常是在拉取镜像的过程中。</li><li>Running：Pod 包含的所有容器都已经成功创建，并且成功运行起来。</li><li>Successed：Pod 中所有容器都成功结束，且不会被重启。这是 Pod 的一种最终状态。</li><li>Failed：Pod 中所有容器都结束，但至少一个容器以失败状态结束。这也是 Pod 的一种最终状态。</li></ul><hr><h3 id="k8s的service和ep是如何关联和相互影响的"><a href="#k8s的service和ep是如何关联和相互影响的" class="headerlink" title="k8s的service和ep是如何关联和相互影响的"></a>k8s的service和ep是如何关联和相互影响的</h3><p>Service 通过selector选择pod,生成endpoint，并通过endpoint和后端pod通信<br>kube-proxy</p><ul><li>监听到service被删除，则删除和该service同名的endpoint对象</li><li>监听到新的service被创建，则根据新建service信息获取相关pod列表，然后创建对应endpoint对象</li><li>监听到service被更新，则根据更新后的service信息获取相关pod列表，然后更新对应endpoint对象</li><li>监听到pod事件，则更新对应的service的endpoint对象，将podIp记录到endpoint中</li></ul><h3 id="详述kube-proxy原理"><a href="#详述kube-proxy原理" class="headerlink" title="详述kube-proxy原理"></a>详述kube-proxy原理</h3><p><a href="https://blog.csdn.net/zhangxiangui40542/article/details/79486995" target="_blank" rel="noopener">kube-proxy iptables</a></p><p>iptables - netfilter - NAT/FILTER</p><p>访问 nodePort - clusterIp:port - Pod:port<br>Kubernetes通过在目标node的iptables中的nat表的PREROUTING和POSTROUTING链中创建一系列的自定义链 （这些自定义链主要是“KUBE-SERVICES”链、“KUBE-POSTROUTING”链、每个服务所对应的“KUBE-SVC-XXXXXXXXXXXXXXXX”链和“KUBE-SEP-XXXXXXXXXXXXXXXX”链），然后通过这些自定义链对流经到该node的数据包做DNAT和SNAT操作以实现路由、负载均衡和地址转换。</p><p>iptables -S -t nat</p><h3 id="rc-rs功能是怎么实现的。详述从API接收到一个创建rc-rs的请求，到最终在节点上创建pod的全过程，尽可能详细。另外，当一个pod失效时，kubernetes是如何发现并重启另一个pod的？"><a href="#rc-rs功能是怎么实现的。详述从API接收到一个创建rc-rs的请求，到最终在节点上创建pod的全过程，尽可能详细。另外，当一个pod失效时，kubernetes是如何发现并重启另一个pod的？" class="headerlink" title="rc/rs功能是怎么实现的。详述从API接收到一个创建rc/rs的请求，到最终在节点上创建pod的全过程，尽可能详细。另外，当一个pod失效时，kubernetes是如何发现并重启另一个pod的？"></a>rc/rs功能是怎么实现的。详述从API接收到一个创建rc/rs的请求，到最终在节点上创建pod的全过程，尽可能详细。另外，当一个pod失效时，kubernetes是如何发现并重启另一个pod的？</h3><p><a href="https://jimmysong.io/kubernetes-handbook/concepts/deployment.html" target="_blank" rel="noopener">Deployment</a></p><p>而当前推荐的做法是使用Deployment+ReplicaSet<br>RC是通过ReplicationManager监控RC和RC内Pod的状态，从而增删Pod，以实现维持特定副本数的功能。</p><h3 id="deployment-rs有什么区别。其使用方式、使用条件和原理是什么。"><a href="#deployment-rs有什么区别。其使用方式、使用条件和原理是什么。" class="headerlink" title="deployment/rs有什么区别。其使用方式、使用条件和原理是什么。"></a>deployment/rs有什么区别。其使用方式、使用条件和原理是什么。</h3><p>deployment控制rs，rs控制pod<br>deployment是rs的超集，提供更多的部署功能，如：回滚、暂停和重启、 版本记录、事件和状态查看、滚动升级和替换升级。</p><h3 id="group中的cpu有哪几种限制方式。k8s是如何使用实现request和limit的。"><a href="#group中的cpu有哪几种限制方式。k8s是如何使用实现request和limit的。" class="headerlink" title="group中的cpu有哪几种限制方式。k8s是如何使用实现request和limit的。"></a>group中的cpu有哪几种限制方式。k8s是如何使用实现request和limit的。</h3><p>cpu.cfs_quota_us、cpu.cfs_period_us 限制CPU的使用时间<br>cpu.shares 限制group的配额</p><p>request 容器使用最小资源<br>limit 容器使用的最大资源<br><a href="https://mp.weixin.qq.com/s/rj2DmHmRofJ1FvVmD6kMUw" target="_blank" rel="noopener">k8s中资源使用</a></p><hr><h2 id="拓展实践"><a href="#拓展实践" class="headerlink" title="拓展实践"></a>拓展实践</h2><h3 id="设想一个一千台物理机，上万规模的容器的kubernetes集群，请详述使用kubernetes时需要注意哪些问题？应该怎样解决？（提示可以从高可用，高性能等方向，覆盖到从镜像中心到kubernetes各个组件等）"><a href="#设想一个一千台物理机，上万规模的容器的kubernetes集群，请详述使用kubernetes时需要注意哪些问题？应该怎样解决？（提示可以从高可用，高性能等方向，覆盖到从镜像中心到kubernetes各个组件等）" class="headerlink" title="设想一个一千台物理机，上万规模的容器的kubernetes集群，请详述使用kubernetes时需要注意哪些问题？应该怎样解决？（提示可以从高可用，高性能等方向，覆盖到从镜像中心到kubernetes各个组件等）"></a>设想一个一千台物理机，上万规模的容器的kubernetes集群，请详述使用kubernetes时需要注意哪些问题？应该怎样解决？（提示可以从高可用，高性能等方向，覆盖到从镜像中心到kubernetes各个组件等）</h3><p><a href="https://kubernetes.io/zh/docs/admin/cluster-large/" target="_blank" rel="noopener">集群规模庞大时要做得限制</a></p><p>配额问题针对云厂商<br>存储在独立的etcd集群中<br>管理节点和组件的规格<br>插件资源占用限制</p><h3 id="一千到五千台的瓶颈"><a href="#一千到五千台的瓶颈" class="headerlink" title="一千到五千台的瓶颈"></a>一千到五千台的瓶颈</h3><p><a href="https://juejin.im/entry/5b6d55d2e51d4519475f91c8" target="_blank" rel="noopener">京东大规模集群实现</a></p><p><a href="https://www.goodrain.com/2018/04/24/tech-20180424/" target="_blank" rel="noopener">1-5000</a></p><h3 id="kubernetes的运行中有哪些注意的要点。"><a href="#kubernetes的运行中有哪些注意的要点。" class="headerlink" title="kubernetes的运行中有哪些注意的要点。"></a>kubernetes的运行中有哪些注意的要点。</h3><h3 id="集群发生雪崩的条件，以及预防手段。"><a href="#集群发生雪崩的条件，以及预防手段。" class="headerlink" title="集群发生雪崩的条件，以及预防手段。"></a>集群发生雪崩的条件，以及预防手段。</h3><p><a href="https://dbaplus.cn/news-141-2139-1.html" target="_blank" rel="noopener">京东大规模k8s集群的精细化运营</a></p><h3 id="设计一种可以替代kube-proxy的实现"><a href="#设计一种可以替代kube-proxy的实现" class="headerlink" title="设计一种可以替代kube-proxy的实现"></a>设计一种可以替代kube-proxy的实现</h3><h3 id="sidecar的设计模式如何在k8s中进行应用。有什么意义。"><a href="#sidecar的设计模式如何在k8s中进行应用。有什么意义。" class="headerlink" title="sidecar的设计模式如何在k8s中进行应用。有什么意义。"></a>sidecar的设计模式如何在k8s中进行应用。有什么意义。</h3><p><a href="http://www.servicemesher.com/blog/sidecar-design-pattern-in-microservices-ecosystem/" target="_blank" rel="noopener">sidecar模式</a><br>将应用程序的功能划分为单独的进程可以被视为 Sidecar 模式</p><ul><li>通过抽象出与功能相关的共同基础设施到一个不同层降低了微服务代码的复杂度。</li><li>因为你不再需要编写相同的第三方组件配置文件和代码，所以能够降低微服务架构中的代码重复度。</li><li>降低应用程序代码和底层平台的耦合度。</li></ul><h3 id="灰度发布是什么。如何使用k8s现有的资源实现灰度发布。"><a href="#灰度发布是什么。如何使用k8s现有的资源实现灰度发布。" class="headerlink" title="灰度发布是什么。如何使用k8s现有的资源实现灰度发布。"></a>灰度发布是什么。如何使用k8s现有的资源实现灰度发布。</h3><p><a href="https://blog.csdn.net/wangyinghong_2013/article/details/78650290" target="_blank" rel="noopener">介绍</a><br><a href="https://zhaohuabing.com/2017/11/08/istio-canary-release/" target="_blank" rel="noopener">使用istio实现k8s的灰度发布</a></p><h3 id="介绍k8s实践中踩过的比较大的一个坑和解决方式。"><a href="#介绍k8s实践中踩过的比较大的一个坑和解决方式。" class="headerlink" title="介绍k8s实践中踩过的比较大的一个坑和解决方式。"></a>介绍k8s实践中踩过的比较大的一个坑和解决方式。</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;kubernetes-总结&quot;&gt;&lt;a href=&quot;#kubernetes-总结&quot; class=&quot;headerlink&quot; title=&quot;kubernetes 总结&quot;&gt;&lt;/a&gt;kubernetes 总结&lt;/h1&gt;&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;h3 id=&quot;0x01-kubernetes包含几个组件。各个组件的功能是什么。组件之间是如何交互的&quot;&gt;&lt;a href=&quot;#0x01-kubernetes包含几个组件。各个组件的功能是什么。组件之间是如何交互的&quot; class=&quot;headerlink&quot; title=&quot;0x01 kubernetes包含几个组件。各个组件的功能是什么。组件之间是如何交互的&quot;&gt;&lt;/a&gt;0x01 kubernetes包含几个组件。各个组件的功能是什么。组件之间是如何交互的&lt;/h3&gt;&lt;h3 id=&quot;Master&quot;&gt;&lt;a href=&quot;#Master&quot; class=&quot;headerlink&quot; title=&quot;Master&quot;&gt;&lt;/a&gt;Master&lt;/h3&gt;&lt;h4 id=&quot;kube-apiserver&quot;&gt;&lt;a href=&quot;#kube-apiserver&quot; class=&quot;headerlink&quot; title=&quot;kube-apiserver&quot;&gt;&lt;/a&gt;kube-apiserver&lt;/h4&gt;&lt;p&gt;暴露整个集群的API，任何资源请求/调用操作都是通过调用API来实现，唯一一个跟ETCD通信的组件&lt;/p&gt;
&lt;h4 id=&quot;ETCD&quot;&gt;&lt;a href=&quot;#ETCD&quot; class=&quot;headerlink&quot; title=&quot;ETCD&quot;&gt;&lt;/a&gt;ETCD&lt;/h4&gt;&lt;p&gt;存储整个集群的信息&lt;/p&gt;
&lt;h4 id=&quot;kube-scheduler&quot;&gt;&lt;a href=&quot;#kube-scheduler&quot; class=&quot;headerlink&quot; title=&quot;kube-scheduler&quot;&gt;&lt;/a&gt;kube-scheduler&lt;/h4&gt;&lt;p&gt;负责对于新建pod的调度，基于node节点的软件硬件负载和亲和性来选择节点&lt;/p&gt;
&lt;h4 id=&quot;kube-controller-manager&quot;&gt;&lt;a href=&quot;#kube-controller-manager&quot; class=&quot;headerlink&quot; title=&quot;kube-controller-manager&quot;&gt;&lt;/a&gt;kube-controller-manager&lt;/h4&gt;&lt;p&gt;运行在master节点的控制器的集合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node Controller 监控和相应节点down&lt;/li&gt;
&lt;li&gt;Replication Controller 为每个RC对象维护正确数量的pod&lt;/li&gt;
&lt;li&gt;Endpoints Controller 负责建立Endpoints，链接Service和Pods&lt;/li&gt;
&lt;li&gt;Service Account &amp;amp; Token Controllers 为新的Namespace创建默认账户和API访问Token&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;cloud-controller-manager&quot;&gt;&lt;a href=&quot;#cloud-controller-manager&quot; class=&quot;headerlink&quot; title=&quot;cloud-controller-manager&quot;&gt;&lt;/a&gt;cloud-controller-manager&lt;/h4&gt;&lt;p&gt;负责和底层云服务交互(可选)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node Controller&lt;/li&gt;
&lt;li&gt;Route Controller&lt;/li&gt;
&lt;li&gt;Service Controller&lt;/li&gt;
&lt;li&gt;Volume Controller&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="kubernetes" scheme="ubclebob2013.github.io/categories/kubernetes/"/>
    
    
      <category term="kubernetes" scheme="ubclebob2013.github.io/tags/kubernetes/"/>
    
  </entry>
  
</feed>
